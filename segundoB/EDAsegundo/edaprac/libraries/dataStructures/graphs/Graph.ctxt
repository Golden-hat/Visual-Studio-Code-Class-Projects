#BlueJ class context
comment0.target=Graph
comment0.text=\ Abstract\ Graph\ class\:\ basis\ for\ the\ Graph\ hierarchy,\ which\n\ \ defines\ a\ graph's\ behaviour.<br>\n\ \ It\ isn't\ an\ interface\ because\ it\ includes\ both\ the\ code\ for\ the\ operations\n\ \ of\ a\ graph\ that\ are\ independent\ both\ of\ its\ type\ as\ of\ their\ implementation.<br>\n\n\ \ @version\ December\ 2018\n
comment1.params=directed
comment1.target=Graph(boolean)
comment1.text=\ Creates\ and\ empty\ graph,\ Directed\ if\ directed\ is\ true\n\ \ or\ Undirected\ otherwise.\n\n\ @param\ directed\ The\ type\ of\ graph,\ Directed\ or\ Undirected\n
comment10.params=
comment10.target=java.lang.String\ toString()
comment10.text=\ Returns\ a\ String\ with\ each\ of\ the\ vertices\ of\ a\ graph\n\ \ and\ their\ adjacent\ vertices,\ in\ insertion\ order.\n\n\ @return\ \ String\ representing\ a\ Graph\n
comment11.params=
comment11.target=int[]\ toArrayBFS()
comment11.text=\ Returns\ an\ array\ with\ each\ of\ the\ vertices\ of\ a\ graph\ and\ their\n\ \ adjacent\ vertices,\ in\ BFS\ order.\n\n\ @return\ \ Vertex\ array\ visited\ in\ a\ BFS\ traversal\n
comment12.params=origin\ res
comment12.target=void\ toArrayBFS(int,\ int[])
comment13.params=
comment13.target=Edge[]\ bfsSpanningTree()
comment13.text=\ PRECONDITION\:\ \!this.isDirected()\n\ \ Returns\ a\ subset\ of\ edges\ that\ connect\ all\ vertices\ in\ an\ Undirected\n\ \ and\ Connected\ graph,\ or\ null\ if\ the\ graph\ is\ Unconnected.\n\n\ @return\ Edge[],\ array\ with\ the\ numV\ -\ 1\ edges\ that\ connect\ the\ numV\n\ \ \ \ \ \ \ \ \ vertices\ of\ the\ graph,\ or\ null\ if\ the\ graph\ is\ Unconnected.\n
comment14.params=origin\ res
comment14.target=void\ bfsSpanningTree(int,\ Edge[])
comment15.params=
comment15.target=Edge[]\ kruskal()
comment15.text=\ PRECONDITION\:\ \!this.isDirected()\n\ Returns\ a\ subset\ of\ edges\ that,\ with\ minimal\ cost,\ connect\ all\ the\n\ vertices\ of\ an\ Undirected\ and\ Connected\ graph,\ or\ null\ if\ the\ graph\n\ is\ Unconnected.\n\n\ @return\ Edge[],\ array\ with\ the\ numV\ -\ 1\ edges\ that\ connect\ the\ numV\n\ \ \ \ \ \ \ \ \ vertices\ with\ minimum\ cost,\ or\ null\ if\ the\ graph\ is\ Unconnected\n
comment2.params=
comment2.target=boolean\ isDirected()
comment2.text=\ Checks\ whether\ a\ graph\ is\ directed\ or\ not.\n\n\ @return\ boolean\ true\ if\ the\ graph\ is\ Directed,\ false\ if\ it\ is\ Undirected\n
comment3.params=
comment3.target=int\ numVertices()
comment3.text=\ Returns\ the\ number\ of\ vertices\ in\ a\ graph.\n\n\ @return\ int\ number\ of\ vertices\n
comment4.params=
comment4.target=int\ numEdges()
comment4.text=\ Returns\ the\ number\ of\ edges\ in\ a\ graph.\n\n\ @return\ int\ number\ of\ edges\n
comment5.params=i\ j
comment5.target=boolean\ containsEdge(int,\ int)
comment5.text=\ Checks\ whether\ the\ edge\ (i,\ j)\ belongs\ to\ a\ graph.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n\ @return\ boolean\ true\ if\ (i,\ j)\ appears\ in\ the\ graph,\ false\ otherwise.\n
comment6.params=i\ j
comment6.target=double\ edgeWeight(int,\ int)
comment6.text=\ Returns\ the\ weight\ of\ the\ edge\ (i,\ j)\ in\ a\ graph,\ 0\ if\ that\ edge\n\ \ is\ not\ contained\ in\ the\ graph.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n\ @return\ double\ Weight\ of\ the\ edge\ (i,\ j),\ or\ 0\ if\ it\ doesn't\ exist.\n
comment7.params=i\ j
comment7.target=void\ addEdge(int,\ int)
comment7.text=\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ to\ an\ Unweighted\ graph.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n
comment8.params=i\ j\ w
comment8.target=void\ addEdge(int,\ int,\ double)
comment8.text=\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ with\ weight\ w\ to\ a\ Weighted\ graph.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n\ @param\ w\ \ \ \ Weight\ of\ the\ edge\ (i,\ j)\n
comment9.params=i
comment9.target=libraries.dataStructures.models.ListPOI\ adjacentTo(int)
comment9.text=\ Returns\ a\ ListPOI\ that\ contains\ vertex\ i's\ adjacent\ vertices.\n\n\ @param\ i\ Vertex\ from\ which\ adjacent\ vertices\ are\ looked\ up.\n\ @return\ ListPOI\ with\ the\ vertices\ adjacent\ to\ i\n
numComments=16
