#BlueJ class context
comment0.target=DirectedGraph
comment0.text=\ Implementation\ of\ a\ Directed\ graph\ (weighted\ or\ unweighted)\n\ \ through\ Adjacency\ Lists.<br>\n\n\ @version\ December\ 2019\n
comment1.params=nV
comment1.target=DirectedGraph(int)
comment1.text=\ Creates\ an\ empty\ Directed\ graph\ with\ nV\ vertices.\n\ \ @param\ nV\ \ Number\ of\ vertices\ in\ the\ graph\n
comment2.params=
comment2.target=int\ numVertices()
comment2.text=\ Returns\ the\ number\ of\ vertices\ in\ a\ graph.\n\ \ @return\ int\ number\ of\ vertices\n
comment3.params=
comment3.target=int\ numEdges()
comment3.text=\ Returns\ the\ number\ of\ edges\ in\ a\ graph.\n\ \ @return\ int\ number\ of\ edges\n
comment4.params=i\ j
comment4.target=boolean\ containsEdge(int,\ int)
comment4.text=\ Checks\ whether\ the\ edge\ (i,\ j)\ belongs\ to\ a\ graph.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n\ @return\ boolean\ true\ if\ (i,\ j)\ appears\ in\ the\ graph,\ false\ otherwise.\n
comment5.params=i\ j
comment5.target=double\ edgeWeight(int,\ int)
comment5.text=\ Returns\ the\ weight\ of\ the\ edge\ (i,\ j)\ in\ a\ graph,\ 0\ if\ that\ edge\n\ \ is\ not\ contained\ in\ the\ graph.\n\ \ @return\ double\ Weight\ of\ the\ edge\ (i,\ j),\ or\ 0\ if\ it\ doesn't\ exist.\n
comment6.params=i\ j
comment6.target=void\ addEdge(int,\ int)
comment6.text=\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ to\ an\ Unweighted\ graph,\n\ \ at\ the\ end\ of\ the\ list\ of\ adjacent\ vertices\ of\ i.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n
comment7.params=i\ j\ w
comment7.target=void\ addEdge(int,\ int,\ double)
comment7.text=\ If\ it\ isn't\ in\ the\ graph,\ adds\ the\ edge\ (i,\ j)\ with\ weight\ w\ to\ a\ Weighted\ graph,\n\ \ at\ the\ end\ of\ the\ list\ of\ adjacent\ vertices\ of\ i.\n\n\ @param\ i\ \ \ \ Source\ vertex\n\ @param\ j\ \ \ \ Target\ vertex\n\ @param\ w\ \ \ \ Weight\ of\ the\ edge\ (i,\ j)\n
comment8.params=i
comment8.target=libraries.dataStructures.models.ListPOI\ adjacentTo(int)
comment8.text=\ Returns\ a\ ListPOI\ that\ contains\ vertex\ i's\ adjacent\ vertices.\n\n\ @param\ i\ Vertex\ from\ which\ adjacent\ vertices\ are\ looked\ up.\n\ @return\ ListPOI\ with\ the\ vertices\ adjacent\ to\ i\n
numComments=9
