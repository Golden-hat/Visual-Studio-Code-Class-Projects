#BlueJ class context
comment0.target=BST
comment0.text=\ BST<E>\ class\ that\ represents\ a\ Binary\ Search\ Tree\ through\ a\n\ \ link\ to\ its\ current\ root.\ Its\ features\ are\:\n\ \ 1.-\ The\ type\ of\ its\ elements\ is\ E\ (must\ implement\ Comparable<E>)\n\ \ 2.-\ ATTRIBUTES\ (protected\ to\ be\ visible\ to\ child\ classes)\:\n\ \ \ \ \ \ HAS\ A\ BSTNode<E>\ root\n\n\ @version\ Marzo\ 2022\n
comment1.params=
comment1.target=BST()
comment1.text=Creates\ an\ empty\ Binary\ Search\ Tree
comment10.params=e\ current
comment10.target=NodeBST\ add(java.lang.Comparable,\ NodeBST)
comment10.text=\ Update\ the\ element\ in\ the\ BST,\ if\ it\ is\ not\ present,\ adds\ it.\n\ \ This\ method\ starts\ the\ search\ from\ the\ given\ node.\n\ @param\ \ \ \ e\ Element\ to\ add/update.\n\ @param\ \ \ \ current\ Current\ node\ in\ the\ search\n\ @return\ \ \ The\ current\ node,\ or\ a\ new\ node\ containing\ "e"\ if\ current\ is\ null.\n
comment11.params=
comment11.target=int\ size()
comment11.text=Returns\ the\ number\ of\ elements\ of\ the\ Binary\ Search\ Tree
comment12.params=actual
comment12.target=int\ size(NodeBST)
comment12.text=Returns\ the\ size\ of\ the\ given\ node
comment13.params=
comment13.target=java.lang.Comparable\ getMin()
comment13.text=\ IFF\ \!isEmpty()\:\ returns\ the\ minimum\ value\ stored\ in\ the\ BST\n\ @return\ Element\ with\ the\ lowest\ value\n
comment14.params=current
comment14.target=NodeBST\ getMin(NodeBST)
comment14.text=\ Returns\ the\ element\ with\ the\ lowest\ value\ from\ the\ given\ node\n\ @param\ \ \ \ current\ \ Current\ node\ in\ the\ search\n\ @return\ \ \ Node\ that\ contains\ the\ element\ with\ the\ lowest\ value\n
comment15.params=
comment15.target=java.lang.Comparable\ removeMin()
comment15.text=\ IFF\ \!isEmpty()\:\ removes\ the\ element\ with\ the\ lowest\ value\ from\ the\ BST\n\ @return\ Minimum\ element\ of\ the\ BST.\n
comment16.params=current
comment16.target=NodeBST\ removeMin(NodeBST)
comment16.text=\ Removes\ the\ minimum\ element\ starting\ from\ the\ given\ node\n\ @param\ \ \ \ current\ \ Current\ node\ in\ the\ search\n\ @return\ Root\ node\ of\ the\ subtree\ whose\ current\ root\ is\ the\ current\ node.\n
comment17.params=e
comment17.target=void\ remove(java.lang.Comparable)
comment17.text=\ Removes\ the\ node\ that\ contains\ "e"\n\ @param\ \ e\ The\ object\ to\ search\ for\ and\ remove\n
comment18.params=e\ current
comment18.target=NodeBST\ remove(java.lang.Comparable,\ NodeBST)
comment18.text=\ Removes\ the\ node\ that\ contains\ "e",\ starting\ from\ the\ given\ node\n\ @param\ \ e\ \ \ \ \ \ \ Object\ to\ search\ for\ and\ remove\n\ @param\ \ current\ Current\ node\ in\ the\ search\n\ @return\ Root\ node\ of\ the\ subtree\ whose\ current\ root\ is\ the\ current\ node.\n
comment19.params=
comment19.target=boolean\ isEmpty()
comment19.text=Whether\ the\ Binary\ Search\ Tree\ is\ empty.
comment2.params=a
comment2.target=BST(java.lang.Comparable[])
comment2.text=\n\ Creates\ a\ new\ Binary\ Search\ Tree\ with\ the\ elements\ of\ the\ given\ array.\n\ The\ resulting\ BST\ must\ be\ balanced.\n\ @param\ a\ Array\ with\ the\ elements\ to\ add\ to\ the\ BST\n
comment20.params=
comment20.target=java.lang.String\ toStringInOrder()
comment20.text=\n\ inOrder\ traversal\ of\ the\ BST\n\ @return\ String\ with\ the\ elements\ according\ to\ the\ inOrder\ traversal\n
comment21.params=sb\ current
comment21.target=void\ toStringInOrder(java.lang.StringBuilder,\ NodeBST)
comment21.text=\n\ inOrder\ traversal\ of\ the\ BST\ starting\ in\ the\ given\ node\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ to\ accumulate\ the\ text\ string\n\ @param\ current\ Current\ node\ in\ the\ traversal\n
comment22.params=
comment22.target=java.lang.String\ toStringPreOrder()
comment22.text=\n\ preOrder\ traversal\ of\ the\ BST\n\ @return\ String\ with\ the\ elements\ according\ to\ the\ preOrder\ traversal\n
comment23.params=sb\ current
comment23.target=void\ toStringPreOrder(java.lang.StringBuilder,\ NodeBST)
comment23.text=\n\ preOrder\ traversal\ of\ the\ BST\ starting\ in\ the\ given\ node\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ to\ accumulate\ the\ text\ string\n\ @param\ current\ Current\ node\ in\ the\ traversal\n
comment24.params=
comment24.target=java.lang.String\ toStringPostOrden()
comment24.text=\n\ postOrder\ traversal\ of\ the\ BST\n\ @return\ String\ with\ the\ elements\ according\ to\ the\ postOrder\ traversal\n
comment25.params=sb\ current
comment25.target=void\ toStringPostOrden(java.lang.StringBuilder,\ NodeBST)
comment25.text=\n\ postOrder\ traversal\ of\ the\ BST\ starting\ in\ the\ given\ node\n\ @param\ sb\ \ \ \ \ \ StringBuilder\ to\ accumulate\ the\ text\ string\n\ @param\ current\ Current\ node\ in\ the\ traversal\n
comment26.params=
comment26.target=java.lang.String\ toStringLevels()
comment26.text=\n\ Level-based\ traversal\ of\ the\ BST\n\ @return\ String\ with\ the\ elements\ according\ to\ the\ level-based\ traversal\n
comment27.params=
comment27.target=java.lang.Comparable[]\ toArrayInOrder()
comment27.text=\n\ Builds\ an\ array\ sorted\ in\ ascending\ order\ with\ all\ the\ elements\n\ of\ the\ BST,\ which\ would\ be\ the\ result\ of\ an\ InOrder\ traversal\ of\ it.\n\ @return\ Array\ with\ the\ values\ of\ the\ BST\ according\ to\ the\ InOrder\ traversal\n
comment28.params=v\ current\ pos
comment28.target=void\ toArrayInOrder(java.lang.Comparable[],\ NodeBST,\ int)
comment28.text=\n\ Builds\ an\ array\ sorted\ in\ ascending\ order\ with\ all\ the\ elements\n\ of\ the\ BST,\ which\ would\ be\ the\ result\ of\ an\ InOrder\ traversal\ of\ it.\n\ @param\ v\ \ \ \ \ \ \ Array\ with\ the\ elements\ according\ to\ an\ InOrder\ traversal\n\ @param\ current\ Current\ node\ in\ the\ traversal\n\ @param\ pos\ \ \ \ \ Position/Index\ in\ the\ array\n
comment3.params=a\ begin\ end
comment3.target=NodeBST\ buildBalanced(java.lang.Comparable[],\ int,\ int)
comment3.text=\n\ Builds\ a\ balanced\ BST\ with\ the\ elements\ in\ a\ range\ of\ an\ array.\n\ @param\ a\ \ \ \ \ Array\ with\ the\ elements\ to\ be\ added\ to\ the\ BST.\n\ @param\ begin\ First\ index\ to\ be\ considered\ in\ the\ array\ (inclusive).\n\ @param\ end\ \ \ Last\ index\ to\ be\ considered\ in\ the\ array\ (inclusive).\n\ @return\ Root\ of\ the\ subtree\ that\ contains\ the\ elements\ of\ the\ given\ array\ range.\n
comment4.params=
comment4.target=void\ rebuildBalanced()
comment4.text=Rebuilds\ the\ BST\ with\ the\ same\ data,\ such\ that\ it\ ends\ up\ balanced.
comment5.params=e
comment5.target=java.lang.Comparable\ successor(java.lang.Comparable)
comment5.text=\n\ Returns\ the\ successor\ of\ an\ element\ in\ the\ BST\n\ @param\ e\ Element\ whose\ successor\ we\ are\ looking\ for\n\ @return\ \ Successor\ of\ e,\ or\ null\ if\ e\ has\ no\ successor\n
comment6.params=e\ current
comment6.target=NodeBST\ successor(java.lang.Comparable,\ NodeBST)
comment6.text=\n\ IFF\ current\ \!\=\ null\:\ returns\ the\ node\ in\ 'current'\ that\ contains\n\ "e"'s\ successor,\ or\ null\ if\ it\ does\ not\ exist.\n\ @param\ e\ \ \ \ \ \ \ Element\ whose\ successor\ we\ are\ looking\ for\n\ @param\ current\ Current\ node\ in\ the\ search\n\ @return\ Successor\ of\ "e"\ in\ the\ current\ node,\ or\ null\ if\ it\ does\ not\ exist.\n
comment7.params=e
comment7.target=java.lang.Comparable\ get(java.lang.Comparable)
comment7.text=\ Searches\ for\ the\ given\ value\ in\ the\ BST\n\ @param\ \ \ \ e\ Element\ to\ look\ for\n\ @return\ \ \ Element\ in\ the\ BST\ that\ matches\ e,\ or\ null\ if\ none\ exist.\n
comment8.params=e\ current
comment8.target=NodeBST\ get(java.lang.Comparable,\ NodeBST)
comment8.text=\ Searches\ for\ the\ given\ value\ starting\ in\ the\ given\ node\n\ @param\ \ \ \ e\ \ \ \ \ \ \ Element\ to\ look\ for\n\ @param\ \ \ \ current\ Current\ node\ in\ the\ search\n\ @return\ \ \ Node\ in\ the\ BST\ that\ contains\ e,\ or\ null\ if\ none\ exist.\n
comment9.params=e
comment9.target=void\ add(java.lang.Comparable)
comment9.text=\ Update\ the\ element\ in\ the\ BST,\ if\ it\ is\ not\ present,\ adds\ it\n\ @param\ \ \ \ e\ Element\ to\ add/update.\n
numComments=29
