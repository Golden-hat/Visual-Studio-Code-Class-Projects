#BlueJ class context
comment0.target=BinaryHeap
comment0.text=\ BinaryHeap\ class\:\ represents\ a\ Heap\ with\ an\ array,\n\ \ and\ stores\ its\ Root\ at\ index\ 1.\n\n\ \ Its\ main\ features\ are\:\n\ \ @param\ <E>,\ the\ type\ of\ its\ elements,\ must\ implement\ Comparable\n\ \ ATTRIBUTES\ (protected\ so\ that\ child\ classes\ can\ see\ them)\:\n\ \ \ \ \ \ HAS\ AN\ array\ to\ store\ the\ elements\ (E[]\ theArray)\n\ \ \ \ \ \ HAS\ A\ size\ that\ stores\ the\ number\ of\ elements\ contained\n\ \ \ \ \ \ \n\ @author\ (profesores\ EDA)\n\ @version\ (Curso\ 2021-2022)\n
comment1.params=
comment1.target=BinaryHeap()
comment1.text=\ Creates\ an\ empty\ Priority\ Queue\ (PQ)\n\ \ with\ initial\ capacity\ DEFAULT_CAPACITY\n
comment10.params=
comment10.target=int\ countLeaves()
comment10.text=returns\ the\ number\ of\ leaves\ of\ a\ Heap\ in\ O(1)
comment11.params=
comment11.target=java.lang.Comparable\ getMax()
comment11.text=returns\ the\ maximum\ of\ a\ Heap\ after\ size/2\ compareTo
comment12.params=e
comment12.target=void\ insert(java.lang.Comparable)
comment13.params=
comment13.target=void\ arrange()
comment14.params=i
comment14.target=void\ arrange(int)
comment15.params=
comment15.target=void\ arrangeIterative()
comment15.text=Resets\ the\ sort\ property\ of\ a\ Heap
comment16.params=
comment16.target=java.lang.String\ toString()
comment16.text=\ gets\ a\ String\ with\ the\ data\ of\ a\ Heap\ sorted\ By\ Levels\ \n\ and\ with\ the\ format\ used\ in\ the\ Java\ standard\ (between\ square\ brackets\ and\ separating\ each\ element\ from\ the\ previous\ one\ with\ a\ comma).\n\ square\ brackets\ and\ separating\ each\ element\ from\ the\ previous\ one\ by\ a\ comma\ \n\ followed\ by\ a\ blank\ space);\ if\ the\ Heap\ is\ empty\ the\ String\ \n\ result\ is\ []\n
comment17.params=e
comment17.target=boolean\ lessThan(java.lang.Comparable)
comment18.params=e
comment18.target=boolean\ greaterThan(java.lang.Comparable)
comment2.params=n
comment2.target=BinaryHeap(int)
comment2.text=\ Creates\ an\ empty\ Priority\ Queue\ (PQ)\n\ with\ initial\ capacity\ n\n
comment3.params=
comment3.target=boolean\ isEmpty()
comment3.text=Checks\ whether\ a\ PQ\ is\ empty
comment4.params=
comment4.target=java.lang.Comparable\ getMin()
comment4.text=\ IFF\ \!isEmpty()\:\ gets\ the\ datum\ with\ the\ maximum\ priority\ in\ the\ PQ\n\ \ @return\ Element\ with\ the\ highest\ priority\ in\ the\ PQ\n
comment5.params=e
comment5.target=void\ add(java.lang.Comparable)
comment5.text=\ Adds\ the\ element\ e\ to\ a\ PQ,\ taking\ into\ account\ its\ priority\n\ \ @param\ e\ Element\ to\ be\ added\n
comment6.params=e\ pos
comment6.target=int\ swim(java.lang.Comparable,\ int)
comment7.params=
comment7.target=void\ duplicateArray()
comment8.params=
comment8.target=java.lang.Comparable\ removeMin()
comment8.text=\ IFF\ \!isEmpty()\:\ gets\ and\ removes\ the\ datum\ with\n\ \ the\ highest\ priority\ from\ the\ PQ\n\ \ @return\ Element\ with\ maximum\ priority\ of\ the\ PQ\n
comment9.params=pos
comment9.target=void\ sink(int)
numComments=19
